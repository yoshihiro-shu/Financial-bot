// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: category.sql

package postgresql

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name
) VALUES (
  $1
)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Categories, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	var i Categories
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategory = `-- name: ListCategory :many
SELECT id, name, created_at, updated_at FROM categories
ORDER BY id
`

func (q *Queries) ListCategory(ctx context.Context) ([]Categories, error) {
	rows, err := q.db.QueryContext(ctx, listCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Categories{}
	for rows.Next() {
		var i Categories
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
